{"version":3,"file":"BlobModule.js","sourceRoot":"","sources":["../src/BlobModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeModule, requireNativeModule, SharedObject } from \"expo\";\nimport { Blob, BlobPart } from \"./BlobModule.types\";\nimport { normalizedContentType } from \"./utils\";\ndeclare class NativeBlob extends SharedObject {\n\treadonly size: number;\n\treadonly type: string;\n\tconstructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n\tslice(start?: number, end?: number, contentType?: string): ExpoBlob;\n\tbytes(): Promise<Uint8Array>;\n\ttext(): Promise<string>;\n\tsyncText(): string;\n}\n\ndeclare class ExpoBlobModule extends NativeModule {\n\tBlob: typeof NativeBlob;\n}\n\nconst NativeBlobModule = requireNativeModule<ExpoBlobModule>(\"ExpoBlob\");\n\nexport class ExpoBlob extends NativeBlobModule.Blob implements Blob {\n\tconstructor(blobParts?: any[] | Iterable<any>, options?: BlobPropertyBag) {\n\t\tlet opt\n\t\tif (options) {\n\t\t\tif (!(options instanceof Object)) {\n\t\t\t\tthrow TypeError()\n\t\t\t}\n\n\t\t\topt = {\n\t\t\t\tendings: options.endings,\n\t\t\t\ttype: options.type === undefined ? \"\" : normalizedContentType(options.type)\n\t\t\t}\n\t\t} else {\n\t\t\topt = options\n\t\t}\n\n\t\tconst inputMapping = (v : any) => {\n\t\t\tif (v instanceof ArrayBuffer) {\n\t\t\t\t// TODO maybe do this natively not in typescript?\n\t\t\t\treturn new Uint8Array(v)\n\t\t\t}\n\t\t\tif (typeof v === 'number') {\n\t\t\t\t// Manual type coercion?\n\t\t\t\treturn String(v)\n\t\t\t}\n\t\t\treturn v\n\t\t}\n\n\t\tif (blobParts === undefined) {\n\t\t\tsuper([], opt);\n\t\t} else if (blobParts === null || !(blobParts instanceof Object)) {\n\t\t\tthrow TypeError();\n\t\t} else {\n\t\t\tsuper([...blobParts].flat(Infinity).map(inputMapping), opt);\n\t\t}\n\t}\n\n\tslice(start?: number, end?: number, contentType?: string): ExpoBlob {\n\t\tconst normalizedType = normalizedContentType(contentType);\n\t\tconst slicedBlob = super.slice(start, end, normalizedType);\n\t\tObject.setPrototypeOf(slicedBlob, ExpoBlob.prototype);\n\t\treturn slicedBlob;\n\t}\n\n\tstream(): ReadableStream {\n\t\tconst text = super.syncText();\n\t\tconst encoder = new TextEncoder();\n\t\tconst uint8 = encoder.encode(text);\n\t\tlet offset = 0;\n\t\treturn new ReadableStream<Uint8Array>({\n\t\t\tpull(controller) {\n\t\t\t\tif (offset < uint8.length) {\n\t\t\t\t\tcontroller.enqueue(uint8.subarray(offset));\n\t\t\t\t\toffset = uint8.length;\n\t\t\t\t} else {\n\t\t\t\t\tcontroller.close();\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tasync arrayBuffer(): Promise<ArrayBufferLike> {\n\t\treturn super.bytes().then((bytes: Uint8Array) => bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength));\n\t}\n\n\ttoString(): string {\n   \t \treturn \"[object Blob]\"\n  \t}\n}\n"]}