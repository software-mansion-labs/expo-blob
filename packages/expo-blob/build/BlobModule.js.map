{"version":3,"file":"BlobModule.js","sourceRoot":"","sources":["../src/BlobModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,mBAAmB,EAAgB,MAAM,MAAM,CAAC;AAEvE,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAehD,MAAM,gBAAgB,GAAG,mBAAmB,CAAiB,UAAU,CAAC,CAAC;AAEzE,MAAM,YAAY,GAAG,CAAC,CAAM,EAAW,EAAE;IACvC,OAAO,CACL,CAAC,YAAY,UAAU;QACvB,CAAC,YAAY,UAAU;QACvB,CAAC,YAAY,SAAS;QACtB,CAAC,YAAY,aAAa;QAC1B,CAAC,YAAY,cAAc;QAC3B,CAAC,YAAY,WAAW;QACxB,CAAC,YAAY,WAAW;QACxB,CAAC,YAAY,UAAU;QACvB,CAAC,YAAY,YAAY;QACzB,CAAC,YAAY,YAAY,CAC1B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,OAAyB,EAAE,EAAE;IAC/C,IAAI,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC,EAAE,CAAC;YACjC,MAAM,SAAS,EAAE,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;QACxB,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;QACrB,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;QAED,OAAO;YACL,OAAO,EAAE,CAAC;YACV,IAAI,EAAE,qBAAqB,CAAC,CAAC,CAAC;SAC/B,CAAC;IACJ,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,OAAO,QAAS,SAAQ,gBAAgB,CAAC,IAAI;IACjD,YAAY,SAAiC,EAAE,OAAyB;QACtE,MAAM,YAAY,GAAG,CAAC,CAAM,EAAE,EAAE;YAC9B,IAAI,CAAC,YAAY,WAAW,EAAE,CAAC;gBAC7B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAClB,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,CAAC;YACD,IAAI,CAAC,YAAY,QAAQ,IAAI,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC7C,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBACjC,OAAO,CAAC,CAAC;YACX,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC,CAAC;QAEF,IAAI,GAAG,GAAU,EAAE,CAAC;QAEpB,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;YAC5B,KAAK,CAAC,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QACjC,CAAC;aAAM,IAAI,SAAS,KAAK,IAAI,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,CAAC;YAC/D,MAAM,SAAS,EAAE,CAAC;QACpB,CAAC;aAAM,CAAC;YACN,KAAK,IAAI,EAAE,IAAI,SAAS,EAAE,CAAC;gBACzB,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,CAAC;YACD,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAClC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,KAAc,EAAE,GAAY,EAAE,WAAoB;QACtD,MAAM,cAAc,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM;QACJ,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;QACnC,OAAO,IAAI,cAAc,CAAa;YACpC,IAAI,EAAE,OAAO;YAEb,KAAK,CAAC,KAAK,CAAC,UAAU;gBACpB,IAAI,KAAK,GAAG,MAAM,YAAY,CAAC;gBAC/B,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;oBACtB,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;qBAAM,CAAC;oBACN,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,KAAK,CAAC,IAAI,CAAC,UAAU;gBACnB,UAAU,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,KAAK;aACT,KAAK,EAAE;aACP,IAAI,CAAC,CAAC,KAAiB,EAAE,EAAE,CAC1B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAC1E,CAAC;IACN,CAAC;IAED,QAAQ;QACN,OAAO,eAAe,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { NativeModule, requireNativeModule, SharedObject } from 'expo';\nimport { Blob, BlobPart } from './BlobModule.types';\nimport { normalizedContentType } from './utils';\ndeclare class NativeBlob extends SharedObject {\n  readonly size: number;\n  readonly type: string;\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob;\n  bytes(): Promise<Uint8Array>;\n  text(): Promise<string>;\n  syncText(): string;\n}\n\ndeclare class ExpoBlobModule extends NativeModule {\n  Blob: typeof NativeBlob;\n}\n\nconst NativeBlobModule = requireNativeModule<ExpoBlobModule>('ExpoBlob');\n\nconst isTypedArray = (v: any): boolean => {\n  return (\n    v instanceof Int16Array ||\n    v instanceof Int32Array ||\n    v instanceof Int8Array ||\n    v instanceof BigInt64Array ||\n    v instanceof BigUint64Array ||\n    v instanceof Uint16Array ||\n    v instanceof Uint32Array ||\n    v instanceof Uint8Array ||\n    v instanceof Float32Array ||\n    v instanceof Float64Array\n  );\n};\n\nconst getOptions = (options?: BlobPropertyBag) => {\n  if (options) {\n    if (!(options instanceof Object)) {\n      throw TypeError();\n    }\n\n    let e = options.endings;\n    let t = options.type;\n    if (e && typeof e === 'object') {\n      e = String(e);\n    }\n    if (t && typeof t === 'object') {\n      t = String(t);\n    }\n\n    return {\n      endings: e,\n      type: normalizedContentType(t),\n    };\n  }\n\n  return options;\n};\n\nexport class ExpoBlob extends NativeBlobModule.Blob implements Blob {\n  constructor(blobParts?: any[] | Iterable<any>, options?: BlobPropertyBag) {\n    const inputMapping = (v: any) => {\n      if (v instanceof ArrayBuffer) {\n        console.log('AB');\n        return new Uint8Array(v);\n      }\n      if (v instanceof ExpoBlob || isTypedArray(v)) {\n        console.log('Blob | TypedArray');\n        return v;\n      }\n      console.log('to String');\n      return String(v);\n    };\n\n    let bps: any[] = [];\n\n    if (blobParts === undefined) {\n      super([], getOptions(options));\n    } else if (blobParts === null || typeof blobParts !== 'object') {\n      throw TypeError();\n    } else {\n      for (let bp of blobParts) {\n        bps.push(inputMapping(bp));\n      }\n      super(bps, getOptions(options));\n    }\n  }\n\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob {\n    const normalizedType = normalizedContentType(contentType);\n    const slicedBlob = super.slice(start, end, normalizedType);\n    Object.setPrototypeOf(slicedBlob, ExpoBlob.prototype);\n    return slicedBlob;\n  }\n\n  stream(): ReadableStream {\n    const uint8promise = super.bytes();\n    return new ReadableStream<Uint8Array>({\n      type: 'bytes',\n\n      async start(controller) {\n        let bytes = await uint8promise;\n        if (bytes.length == 0) {\n          controller.close();\n        } else {\n          controller.enqueue(bytes);\n        }\n      },\n\n      async pull(controller) {\n        controller.close();\n      },\n    });\n  }\n\n  async arrayBuffer(): Promise<ArrayBufferLike> {\n    return super\n      .bytes()\n      .then((bytes: Uint8Array) =>\n        bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength)\n      );\n  }\n\n  toString(): string {\n    return '[object Blob]';\n  }\n}\n"]}