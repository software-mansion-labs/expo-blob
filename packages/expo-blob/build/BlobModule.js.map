{"version":3,"file":"BlobModule.js","sourceRoot":"","sources":["../src/BlobModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,mBAAmB,EAAgB,MAAM,MAAM,CAAC;AAGvE,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAehD,MAAM,gBAAgB,GAAG,mBAAmB,CAAiB,UAAU,CAAC,CAAC;AAEzE,MAAM,OAAO,QAAS,SAAQ,gBAAgB,CAAC,IAAI;IACjD,YAAY,SAAiB,EAAE,OAAyB;QACtD,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,KAAc,EAAE,GAAY,EAAE,WAAoB;QACtD,MAAM,cAAc,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,YAAY,GAA+B,IAAI,CAAC;QAEpD,OAAO,IAAI,cAAc,CAAC;YACxB,IAAI,EAAE,OAAO;YACb,KAAK,CAAC,IAAI,CAAC,UAAe;gBACxB,IAAI,CAAC,YAAY,EAAE,CAAC;oBAClB,YAAY,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC9B,CAAC;gBACD,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC;gBACjC,IAAI,MAAM,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;oBAC3B,UAAU,CAAC,KAAK,EAAE,CAAC;oBACnB,OAAO;gBACT,CAAC;gBAED,IAAI,UAAU,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC;oBACjC,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC;oBACzC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC7D,MAAM,KAAK,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAC1C,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACnB,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC7C,MAAM,GAAG,GAAG,CAAC;oBACb,IAAI,MAAM,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;wBAC3B,UAAU,CAAC,KAAK,EAAE,CAAC;oBACrB,CAAC;oBACD,OAAO;gBACT,CAAC;gBAED,MAAM,SAAS,GAAG,MAAM,CAAC;gBACzB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,SAAS,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;gBACvD,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;gBAChD,MAAM,GAAG,GAAG,CAAC;YACf,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,KAAK;aACT,KAAK,EAAE;aACP,IAAI,CAAC,CAAC,KAAiB,EAAE,EAAE,CAC1B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAC1E,CAAC;IACN,CAAC;CACF","sourcesContent":["import { NativeModule, requireNativeModule, SharedObject } from 'expo';\n\nimport { Blob, BlobPart } from './BlobModule.types';\nimport { normalizedContentType } from './utils';\ndeclare class NativeBlob extends SharedObject {\n  readonly size: number;\n  readonly type: string;\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob;\n  bytes(): Promise<Uint8Array>;\n  text(): Promise<string>;\n  syncText(): string;\n}\n\ndeclare class ExpoBlobModule extends NativeModule {\n  Blob: typeof NativeBlob;\n}\n\nconst NativeBlobModule = requireNativeModule<ExpoBlobModule>('ExpoBlob');\n\nexport class ExpoBlob extends NativeBlobModule.Blob implements Blob {\n  constructor(blobParts?: any[], options?: BlobPropertyBag) {\n    super(blobParts?.flat(Infinity) ?? [], options);\n  }\n\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob {\n    const normalizedType = normalizedContentType(contentType);\n    const slicedBlob = super.slice(start, end, normalizedType);\n    Object.setPrototypeOf(slicedBlob, ExpoBlob.prototype);\n    return slicedBlob;\n  }\n\n  stream(): ReadableStream {\n    const self = this;\n    let offset = 0;\n    let bytesPromise: Promise<Uint8Array> | null = null;\n\n    return new ReadableStream({\n      type: 'bytes',\n      async pull(controller: any) {\n        if (!bytesPromise) {\n          bytesPromise = self.bytes();\n        }\n        const bytes = await bytesPromise;\n        if (offset >= bytes.length) {\n          controller.close();\n          return;\n        }\n\n        if (controller.byobRequest?.view) {\n          const view = controller.byobRequest.view;\n          const end = Math.min(offset + view.byteLength, bytes.length);\n          const chunk = bytes.subarray(offset, end);\n          view.set(chunk, 0);\n          controller.byobRequest.respond(chunk.length);\n          offset = end;\n          if (offset >= bytes.length) {\n            controller.close();\n          }\n          return;\n        }\n\n        const chunkSize = 65_536;\n        const end = Math.min(offset + chunkSize, bytes.length);\n        controller.enqueue(bytes.subarray(offset, end));\n        offset = end;\n      },\n    });\n  }\n\n  async arrayBuffer(): Promise<ArrayBufferLike> {\n    return super\n      .bytes()\n      .then((bytes: Uint8Array) =>\n        bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength)\n      );\n  }\n}\n"]}